[config]

# Tab delimited file that defines the database
db_file = config/database.csv

# Set initial values after the database is initialized.
# If any plugins overwrite this data it will be overridden
ini_file = config/c170b.ini


# Data connections are configured as 'conn_' folowed by the connection name.  The
# module name is required and the rest of the configuration will be passed to the
# module.

# Command Line Module
[conn_command]
load = no
module = plugins.command
prompt = FIX:
# If set quiting the command interpreter plugin
# will end execution of the program
quit = yes

# Network FIX Protocol Interface
[conn_netfix]
load = yes
module = plugins.netfix
type = server
host = 0.0.0.0
port = 3490
buffer_size = 1024
timeout = 1.0

# Network Command Interface
[conn_net_int]
load = no
module = plugins.net_int
host = 127.0.0.1
port = 8888

# FlightGear Flight Simulator Module
# To start FlightGear with these paramaters, use the following command...
#   >fgfs --generic=socket,bi,10,localhost,5500,udp,fix_fgfs
# The fix_fgfs.xml file should be in the FG_ROOT/Protocols directory which should be
# in one of the following locations...
# LINUX: /usr/share/games/flightgear/
# OSX: /Applications/FlightGear.app/Contents/Resources/data/
# WINDOWS: c:\Program Files\FlightGear\data\
[conn_fgfs]
load = no
module = plugins.fgfs
# This should be the same as $FG_ROOT on your system.  It is used to help
# fixgw find the xml configuration files
fg_root = /usr/share/games/flightgear/
# fg_root = /Applications/FlightGear.app/Contents/Resources/data/
# fg_root = c:\Program Files\FlightGear\data\

# This is the name of the protocol config file that fixgw and fgfs will use to
# define the protocol. It is very important that both programs are looking at
# the same file.
xml_file = fix_fgfs.xml
# UDP Ports used for communication to FlightGear.
host = localhost
# port used for the -out argument to FlightGear
out_port = 5500
# port used for the -in argument to FlightGear
in_port = 5501
# Update rate for sending data to FlightGear
rate = 10  # updates / second


[conn_xplane]
load = no
module = plugins.xplane
# IP address where the X-Plane simulator is running
ipaddress = 127.0.0.1
# UDP Ports to use for sending and receiving data
# These should match the configuration in the
# "Net Connections" Menu of X-Plane
udp_in = 49001   # Port to received data from X-Plane
udp_out = 49002  # Port to send data to X-Plane

# These are the X-Plane data indexes that we will write.  These
# would match the
#idx8  = CTLPTCH, CTLROLL, CTLYAW, x, x, x, x, x
idx25 = THR1,  THR2,  x, x, x, x, x, x
#idx28 = PROP1, PROP2, x, x, x, x, x, x
idx29 = MIX1,  MIX2,  x, x, x, x, x, x

# CAN-FIX
[conn_canfix]
load = yes
module = plugins.canfix
# See the python-can documentation for the meaning of these options
interface = socketcan
channel = vcan0
#interface = serial
#channel = /dev/ttyUSB0

# This is our CAN-FIX device ID
device = 145

[conn_gui]
load = yes
module = plugins.gui

[conn_test]
load = no
module = plugins.test

[conn_bno055]
load = yes
module = plugins.rpi_bno055

[conn_bmp085]
load = yes
module = plugins.rpi_bmp085
tkey = CAT
pkey = AIRPRESS

[conn_virtualwire]
load = yes
module = plugins.rpi_virtualwire
rxpin = 23
bps = 2000

[conn_rotary_encoder]
load = yes
module = plugins.rpi_rotary_encoder
btn = True
btnkey = BARO
btnstcounter = 29.92
btnincr = 0.01
btnpin = 4
pina = 26
pinb = 19
stcount = 0
rkey = PITCHSET
incr = 1

[conn_mcp3008]
load = yes
module = plugins.rpi_mcp3008
vkey1 = VOLT
vkey2 = ANLG2
vkey3 = ANLG3
vkey4 = ANLG4
vkey5 = ANLG5
vkey6 = ANLG6
vkey7 = ANLG7
vkey8 = ANLG8
clk = 18
miso = 23
mosi = 24
cs = 25

# if you want several button copie this configuration with different setting like this [conn_button2]
[conn_button1]
load = no
module = plugins.rpi_button
btnkey = BTN1
btnpin = 4
rdelay = 0 # 0 for debouncing or time in seconde to determine the repeat delay

# RAIS Protocol Interface
[conn_rais]
load = no
module = plugins.rais
rais_directory = /media/sf_Garrett/Documents/Archive/AutoPilot
rais_server_module = RAIS
rais_config_path = /media/sf_Garrett/Documents/Archive/AutoPilot/sensors_pubsub_vmbox.yml


# Logging configuration - See Python logging.config module documenation
[loggers]
keys=root

[handlers]
keys=stderr,file,syslog

[formatters]
keys=form1

[logger_root]
# messages with levels below the one given will not be logged
#level=DEBUG
level=INFO
#level=WARNING
#level=ERROR
#level=CRITICAL

handlers=stderr
#handlers=file
#handlers=syslog
propagate=1

[handler_stderr]
class=StreamHandler
formatter=form1
args=(sys.stderr,)

[handler_file]
class=FileHandler
formatter=form1
# Overwrites the log file each start
args=('fixgw.log', 'w')
# Appends to the log file
# args=('fixgw.log', 'a')

[handler_syslog]
class=handlers.SysLogHandler
formatter=form1
args=()

[formatter_form1]
format=%(levelname)s:%(asctime)s:%(name)s - %(message)s
datefmt=%Y%m%d-%H:%M:%S
class=logging.Formatter
